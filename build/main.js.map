{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["'use strict';\n\nimport * as utils from '@iobroker/adapter-core';\nimport { _translate, generateRandomToken, computeCodeChallenge, randomBytes } from './lib/tools.js';\nimport { URL } from 'url';\nimport got from '@esm2cjs/got';\nimport { CookieJar } from 'tough-cookie';\n\nlet systemLang = 'de';\n\nclass RemehaHomeAdapter extends utils.Adapter {\n    private account: string;\n    private got!: got;\n    private client!: got;\n    private timerSleep: ioBroker.Timeout | undefined;\n    private pollInterval: number;\n    private accessToken: string | null;\n    private refreshToken: string | null;\n    private csrfToken: string;\n    private codeChallenge: string | null;\n    private state: string | null;\n    private postUpdate: boolean;\n    private password: string;\n    private cookieJar: CookieJar;\n    private interval: ioBroker.Interval | undefined;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'remeha-home',\n        });\n        this.account = '';\n        this.password = '';\n        this.timerSleep = null;\n        this.pollInterval = 60;\n        this.accessToken = null;\n        this.refreshToken = null;\n        this.csrfToken = '';\n        this.codeChallenge = null;\n        this.state = '';\n        this.postUpdate = false;\n        this.cookieJar = new CookieJar();\n        void this.loadGot();\n\n        this.on('ready', this.onReady.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n\n    }\n\n    private async onReady(): Promise<void> {\n        this.log.info('Remeha Home Adapter started.');\n\n        const _language = await this.getForeignObjectsAsync('system.config');\n        const systemConfig = _language['system.config'];\n\n        if (systemConfig?.common?.language) {\n            systemLang = systemConfig.common.language;\n        }\n\n        this.account = this.config.account;\n        this.password = this.config.password;\n        this.pollInterval = this.config.pollInterval;\n\n        if (isNaN(this.pollInterval) || this.pollInterval < 30) this.pollInterval = 30;\n        if (this.pollInterval > 300) this.pollInterval = 300;\n\n        this.subscribeStates('data.roomThermostat.setPoint');\n        this.subscribeStates('data.roomThermostat.firePlaceModeActive');\n        this.subscribeStates('data.roomThermostat.setZoneMode');\n\n        await this.createDevices();\n        await this.schedulePoll();\n    }\n\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state) {\n            if (id === `${this.namespace}.data.roomThermostat.setPoint`) {\n                this.postUpdate = false;\n\n                if (!state?.ack) {\n                    await this.setState('data.roomThermostat.setPoint', { val: state?.val, ack: true });\n                } else {\n\n                    const postData = {\n                        roomTemperatureSetPoint: state.val\n                    };\n                    await this.setValues('setPoint', postData);\n                }\n            }\n\n            if (id === `${this.namespace}.data.roomThermostat.setZoneMode`) {\n                this.postUpdate = false;\n\n                if (!state?.ack) {\n                    await this.setState('data.roomThermostat.setZoneMode', { val: state?.val, ack: true });\n                } else {\n                    let mode = '';\n\n                    switch (state.val) {\n                        case 'Scheduling':\n                            mode = 'schedule'\n                            break;\n                        case 'Manual':\n                            mode = 'manual'\n                            break;\n                        case 'FrostProtection':\n                            mode = 'anti-frost';\n                            break;\n\n                    }\n                    const postData = {\n                        zoneMode: state.val,\n                        value: mode,\n                    };\n                    await this.setValues('zoneMode', postData);\n                }\n            }\n\n            if (id === `${this.namespace}.data.roomThermostat.firePlaceModeActive`) {\n                this.postUpdate = false;\n\n                if (!state?.ack) {\n                    await this.setState('data.roomThermostat.firePlaceModeActive', { val: state?.val, ack: true });\n                } else {\n                    const postData = {\n                        fireplaceModeActive: state.val\n                    };\n                    await this.setValues('fireplaceModeActive', postData);\n                }\n            }\n        }\n    }\n\n    private async onUnload(callback: ioBroker.MessageCallback): Promise<void> {\n        try {\n            await this.setState('info.connection', false, true);\n            this.clearInterval(this.interval);\n            this.clearTimeout(this.timerSleep);\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    private async sleep(ms: number): Promise<void> {\n        return new Promise((resolve) => {\n            // @ts-ignore\n            this.timerSleep = this.setTimeout(() => resolve(), ms);\n        });\n    }\n\n    private async createDevices(): Promise<void> {\n        interface StateDefinition {\n            id: string;\n            name: string;\n            type: 'number' | 'string' | 'boolean' | 'array' | 'object';\n            role: string;\n            unit?: string;\n            read: boolean;\n            write: boolean;\n            states?: Record<string, string>;\n        }\n\n        const scheduling = await _translate('Scheduling', systemLang);\n        const manual = await _translate('Manual', systemLang);\n        const frostProtection = await _translate('FrostProtection', systemLang);\n\n        const states: StateDefinition[] = [\n            { id: 'data.roomThermostat.roomTemperature', name: 'Room Temperature', read: true, write: false, type: 'number', role: 'value.temperature', unit: '\u00B0C' },\n            { id: 'data.dhw.outdoorTemperature', name: 'Outdoor Temperature', read: true, write: false, type: 'number', role: 'value.temperature', unit: '\u00B0C' },\n            { id: 'data.dhw.waterPressure', name: 'Water Pressure', read: true, write: false, type: 'number', role: 'value.pressure', unit: 'bar' },\n            { id: 'data.roomThermostat.setPoint', name: 'Set Point Temperature', read: true, write: true, type: 'number', role: 'level.temperature', unit: '\u00B0C' },\n            { id: 'data.dhw.dhwTemperature', name: 'DHW Temperature', read: true, write: false, type: 'number', role: 'value.temperature', unit: '\u00B0C' },\n            { id: 'data.dhw.dhwTargetSetpoint', name: 'DHW Target Setpoint', read: true, write: false, type: 'number', role: 'value.temperature', unit: '\u00B0C' },\n            { id: 'data.dhw.dhwStatus', name: 'DHW Status', read: true, write: false, type: 'string', role: 'value' },\n            { id: 'data.dhw.name', name: 'DHW Name', read: true, write: false, type: 'string', role: 'value' },\n            { id: 'data.dhw.gasCalorificValue', name: 'Gas Calorific Value', read: true, write: false, type: 'number', role: 'value.power', unit: 'kWh/m\u00B3' },\n            { id: 'data.roomThermostat.name', name: 'Thermostat Name', read: true, write: false, type: 'string', role: 'value' },\n            { id: 'data.roomThermostat.setZoneMode', name: 'Set Zone Mode', role: 'level.mode.thermostat', read: true, write: true, type: 'string', states: { Scheduling: scheduling, Manual: manual, FrostProtection: frostProtection } }, \n            { id: 'data.roomThermostat.currentZoneMode', name: 'Current Zone Mode', role: 'level.mode.thermostat', read: true, write: false, type: 'string' },\n            { id: 'data.dhw.waterPressureOK', name: 'Water Pressure OK', read: true, write: false, role: 'switch', type: 'boolean' },\n            { id: 'data.roomThermostat.firePlaceModeActive', name: 'Fireplace Mode Active', read: true, write: true, role: 'switch', type: 'boolean' },\n            { id: 'data.roomThermostat.nextSetpoint', name: 'next Setpoint', read: true, write: false, role: 'value.temperature', type: 'number', unit: '\u00B0C' },\n            { id: 'data.roomThermostat.currentScheduleSetPoint', name: 'current Schedule SetPoint', read: false, write: false, role: 'value.temperature', type: 'number', unit: '\u00B0C' },\n            { id: 'data.roomThermostat.nextSwitchTime', name: 'next Switch Time', read: true, write: false, role: 'value.datetime', type: 'string' },\n            { id: 'data.roomThermostat.activeComfortDemand', name: 'active Comfort Demand', read: true, write: false, role: 'value', type: 'string' },\n            { id: 'info.deviceType', name: 'Device Type', read: true, write: false, role: 'value', type: 'string' },\n            { id: 'info.serialNumber', name: 'Serial Number', read: true, write: false, role: 'value', type: 'string' },\n            { id: 'info.softwareVersion', name: 'Software Version', read: true, write: false, role: 'value', type: 'string' },\n            { id: 'info.hardwareVersion', name: 'Hardware Version', read: true, write: false, role: 'value', type: 'string' },\n            { id: 'info.applianceName', name: 'Appliance Name', read: true, write: false, role: 'value', type: 'string' },\n        ];\n\n        for (const state of states) {\n            await this.setObjectNotExistsAsync(state.id, {\n                type: 'state',\n                common: {\n                    name: await _translate(state.name, systemLang),\n                    type: state.type || 'number',\n                    role: state.role,\n                    unit: state.unit || '',\n                    read: state.read,\n                    write: state.write,\n                    states: state.states || undefined,\n                },\n                native: {},\n            });\n        }\n    }\n\n    private async schedulePoll(): Promise<void> {\n        await this.poll();\n        this.interval = this.setInterval(() => this.poll(), this.pollInterval * 1000);\n    }\n\n    private async poll(): Promise<void> {\n        try {\n            if (this.accessToken === null) {\n                await this.resolveExternalData();\n            } else if (this.accessToken !== null && await this.checkTokenValidity(this.accessToken) !== 200) {\n                await this.refreshAccessToken();\n            }\n            if (await this.checkTokenValidity(this.accessToken) === 200) {\n                await this.updateDevices();\n            }\n        } catch (error) {\n            this.log.error(`Polling error: ${error.message}`);\n        }\n    }\n\n    private loadGot(): void {\n        this.got = got;\n        this.client = this.got.extend({\n            prefixUrl: 'https://remehalogin.bdrthermea.net',\n            timeout: {\n                connect: 2000,\n                request: 5000\n            },\n            cookieJar: this.cookieJar,\n        });\n    }\n\n    private async resolveExternalData(): Promise<void> {\n        try {\n            this.state = await randomBytes(32);\n            const codeChallenge: string = await generateRandomToken(64);\n            this.codeChallenge = codeChallenge;\n            const codeChallengeSha256 = await computeCodeChallenge(codeChallenge);\n\n            const response = await this.client.get('bdrb2cprod.onmicrosoft.com/oauth2/v2.0/authorize?', {\n                searchParams: {\n                    response_type: 'code',\n                    client_id: '6ce007c6-0628-419e-88f4-bee2e6418eec',\n                    redirect_uri: 'com.b2c.remehaapp://login-callback',\n                    scope: 'openid https://bdrb2cprod.onmicrosoft.com/iotdevice/user_impersonation offline_access',\n                    state: this.state,\n                    code_challenge: codeChallengeSha256,\n                    code_challenge_method: 'S256',\n                    p: 'B2C_1A_RPSignUpSignInNewRoomV3.1',\n                    brand: 'remeha',\n                    lang: 'en',\n                    nonce: 'defaultNonce',\n                    prompt: 'login',\n                    signUp: 'False'\n                },\n                followRedirect: true,\n            });\n\n            this.log.debug(`Get Auth: ${response.statusCode === 200 ? 'OK' : 'failed'}`);\n\n            let csrfTokenCookie;\n            const cookies = response.headers['set-cookie'];\n            if (cookies) {\n\n                csrfTokenCookie = cookies.find((cookie: string) => cookie.startsWith('x-ms-cpim-csrf=') && cookie.includes('domain=remehalogin.bdrthermea.net'));\n\n                if (csrfTokenCookie) {\n                    this.csrfToken = csrfTokenCookie.split(';')[0].replace(\"x-ms-cpim-csrf=\", \"\").replace(/;$/, \"\");\n                } else {\n                    throw new Error('CSRF-Token not found in response headers.');\n                }\n\n            }\n\n            // Extract the request_id from headers\n            const requestId = response.headers['x-request-id'] as string;\n\n            // Create state_properties JSON and encode it in base64 URL-safe format\n            const statePropertiesJson = `{\"TID\":\"${requestId}\"}`;\n            const stateProperties = Buffer.from(statePropertiesJson)\n                .toString('base64')\n                .replace(/\\+/g, '-')\n                .replace(/\\//g, '_')\n                .replace(/=+$/, '');\n\n            const authorizationCode = await this.login(stateProperties, this.csrfToken);\n\n            if (!authorizationCode) throw new Error('Authorization code is missing.');\n\n            await this.fetchAccessToken(authorizationCode);\n        } catch (error) {\n            this.log.error(`Error resolving external data: ${error.message}`);\n        }\n    }\n\n    private async login(stateProperties: string, csrfToken: string): Promise<string | null> {\n        try {\n            const response = await this.client.post('bdrb2cprod.onmicrosoft.com/B2C_1A_RPSignUpSignInNewRoomv3.1/SelfAsserted', {\n                searchParams: {\n                    tx: `StateProperties=${stateProperties}`,\n                    p: 'B2C_1A_RPSignUpSignInNewRoomv3.1',\n                },\n                form: {\n                    request_type: 'RESPONSE',\n                    signInName: this.account,\n                    password: this.password\n                },\n                headers: {\n                    'x-csrf-token': csrfToken,\n                },\n                followRedirect: true,\n            });\n\n            this.log.debug(`Post Login Status: ${response.statusCode === 200 ? 'OK' : 'failed'}`);\n\n        } catch (error) {\n            this.log.error(`Error during login: ${error.message}`);\n            if (error.response) {\n                this.log.error(`Response status: ${error.response.status}`);\n            }\n            throw error;\n        }\n\n        try {\n            const response = await this.client.get('bdrb2cprod.onmicrosoft.com/B2C_1A_RPSignUpSignInNewRoomv3.1/api/CombinedSigninAndSignup/confirmed', {\n                searchParams: {\n                    rememberMe: 'false',\n                    csrf_token: csrfToken,\n                    tx: `StateProperties=${stateProperties}`,\n                    p: 'B2C_1A_RPSignUpSignInNewRoomv3.1',\n                },\n                followRedirect: false\n            });\n\n            this.log.debug(`Get Login Status: ${response.statusCode === 302 ? 'OK' : 'failed'}`);\n\n            const parsedCallbackUrl = new URL(response.headers.location as string);\n            if (parsedCallbackUrl) {\n                const queryStringDict = parsedCallbackUrl.searchParams;\n                const code = queryStringDict.get('code');\n                if (code) {\n                    return code;\n                } else {\n                    this.log.debug('Authorization code not found');\n\n                }\n            } else {\n                this.log.debug('No redirect URL found in response headers.');\n            }\n            this.log.debug('Authorization code not found in redirect URL.');\n            return null;\n        } catch (error) {\n            this.log.error(`Error get code: ${error}`);\n            if (error.response) {\n                this.log.error(`Response error Status: ${error.response}`);\n            }\n            throw error;\n        }\n    }\n\n    private async fetchAccessToken(code: string): Promise<string | null> {\n        try {\n            const grantParams = {\n                grant_type: 'authorization_code',\n                code: code,\n                redirect_uri: 'com.b2c.remehaapp://login-callback',\n                code_verifier: this.codeChallenge,\n                client_id: '6ce007c6-0628-419e-88f4-bee2e6418eec',\n            };\n            const response = await this.client.post('bdrb2cprod.onmicrosoft.com/oauth2/v2.0/token', {\n                searchParams: {\n                    p: 'B2C_1A_RPSignUpSignInNewRoomV3.1'\n                },\n                form: grantParams,\n                followRedirect: true,\n                responseType: 'json'\n            });\n            this.log.debug(`Get Accesstoken Status: ${response.statusCode === 200 ? 'OK' : 'failed'}`);\n            const data = response.body as { access_token: string; refresh_token: string };\n            this.accessToken = data.access_token;\n            this.refreshToken = data.refresh_token;\n            return this.accessToken;\n        } catch (error) {\n            this.log.error(`Error fetching access token: ${error}`);\n            throw error;\n        }\n    }\n\n    private async refreshAccessToken(): Promise<void> {\n        try {\n            const grantParams = {\n                grant_type: 'refresh_token',\n                refresh_token: this.refreshToken,\n                client_id: '6ce007c6-0628-419e-88f4-bee2e6418eec'\n            };\n\n            const response = await this.client.post('bdrb2cprod.onmicrosoft.com/oauth2/v2.0/token', {\n                searchParams: {\n                    p: 'B2C_1A_RPSignUpSignInNewRoomV3.1'\n                },\n                form: grantParams,\n                followRedirect: true,\n                responseType: 'json'\n            });\n\n            this.log.debug(`Get Refreshtoken Status: ${response.statusCode === 200 ? 'OK' : 'failed'}`);\n            const data = response.body as { access_token: string; refresh_token: string };\n            this.accessToken = data.access_token;\n        } catch (error) {\n            this.log.error(`Error refreshing access token: ${error}`);\n            throw error;\n        }\n    }\n\n    private async updateDevices(): Promise<void> {\n        try {\n            const response = await this.got.get('https://api.bdrthermea.net/Mobile/api/homes/dashboard', {\n                headers: {\n                    Authorization: `Bearer ${this.accessToken}`,\n                    'Ocp-Apim-Subscription-Key': 'df605c5470d846fc91e848b1cc653ddf',\n                    'x-csrf-token': this.csrfToken\n                }\n            });\n            this.log.debug(`Get Update Status: ${response.statusCode === 200 ? 'OK' : 'failed'}`);\n\n            const data = JSON.parse(response.body);\n\n            const _zoneMode = data.appliances[0].climateZones[0].zoneMode;\n            const _zoneModeTranslate = await _translate(_zoneMode, systemLang);\n\n            await this.setState('data.roomThermostat.roomTemperature', { val: data.appliances[0].climateZones[0].roomTemperature, ack: true });\n            await this.setState('data.dhw.outdoorTemperature', { val: data.appliances[0].outdoorTemperature, ack: true });\n            await this.setState('data.dhw.waterPressure', { val: data.appliances[0].waterPressure, ack: true });\n            await this.setState('data.dhw.dhwTemperature', { val: data.appliances[0].hotWaterZones[0].dhwTemperature, ack: true });\n            await this.setState('data.dhw.dhwTargetSetpoint', { val: data.appliances[0].hotWaterZones[0].targetSetpoint, ack: true });\n            await this.setState('data.dhw.dhwStatus', { val: data.appliances[0].hotWaterZones[0].dhwStatus, ack: true });\n            await this.setState('data.dhw.name', { val: data.appliances[0].hotWaterZones[0].name, ack: true });\n            await this.setState('data.dhw.gasCalorificValue', { val: data.appliances[0].gasCalorificValue, ack: true });\n            await this.setState('data.roomThermostat.currentZoneMode', { val: _zoneModeTranslate, ack: true });\n            await this.setState('data.dhw.waterPressureOK', { val: data.appliances[0].waterPressureOK, ack: true });\n            await this.setState('data.roomThermostat.name', { val: data.appliances[0].climateZones[0].name, ack: true });\n            await this.setState('data.roomThermostat.nextSetpoint', { val: data.appliances[0].climateZones[0].nextSetpoint, ack: true });\n            await this.setState('data.roomThermostat.currentScheduleSetPoint', { val: data.appliances[0].climateZones[0].currentScheduleSetPoint, ack: true });\n            await this.setState('data.roomThermostat.activeComfortDemand', { val: data.appliances[0].climateZones[0].activeComfortDemand, ack: true });\n            await this.setState('data.roomThermostat.nextSwitchTime', { val: data.appliances[0].climateZones[0].nextSwitchTime, ack: true });\n\n            if (_zoneMode !== 'TemporaryOverride' && !this.postUpdate) {\n                await this.setState('data.roomThermostat.setZoneMode', { val: _zoneMode, ack: true })\n            }\n\n            this.log.debug(`postUpdate: ${this.postUpdate}`)\n            if (!this.postUpdate) {\n                await this.setState('data.roomThermostat.setPoint', { val: data.appliances[0].climateZones[0].setPoint, ack: true });\n                await this.setState('data.roomThermostat.firePlaceModeActive', { val: data.appliances[0].climateZones[0].firePlaceModeActive, ack: true });\n            }\n\n            await this.sleep(1000);\n\n            const appliance = await this.got.get(`https://api.bdrthermea.net/Mobile/api/appliances/${data?.appliances[0].applianceId}/technicaldetails`, {\n                headers: {\n                    Authorization: `Bearer ${this.accessToken}`,\n                    'Ocp-Apim-Subscription-Key': 'df605c5470d846fc91e848b1cc653ddf',\n                    'x-csrf-token': this.csrfToken\n                }\n            });\n\n            this.log.debug(`Get Device Info Status: ${appliance.statusCode === 200 ? 'OK' : 'failed'}`);\n            const applianceInfo = JSON.parse(appliance.body);\n\n            await this.setState('info.applianceName', { val: applianceInfo.applianceName, ack: true });\n            await this.setState('info.deviceType', { val: applianceInfo.internetConnectedGateways[0].deviceTypeName, ack: true });\n            await this.setState('info.serialNumber', { val: applianceInfo.internetConnectedGateways[0].serialNumber, ack: true });\n            await this.setState('info.softwareVersion', { val: applianceInfo.internetConnectedGateways[0].softwareVersion, ack: true });\n            await this.setState('info.hardwareVersion', { val: applianceInfo.internetConnectedGateways[0].hardwareVersion, ack: true });\n\n        } catch (error) {\n            this.log.error(`Error updating devices: ${error}`);\n        }\n    }\n\n    private async checkTokenValidity(token: string | null): Promise<number | boolean> {\n        try {\n            const response = await this.got.get('https://api.bdrthermea.net/Mobile/api/homes/dashboard', {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                    'Ocp-Apim-Subscription-Key': 'df605c5470d846fc91e848b1cc653ddf',\n                    'x-csrf-token': this.csrfToken\n                }\n            });\n            this.log.debug(`Get checkTokenValidity Status: ${response.statusCode === 200 ? 'OK' : 'failed'}`);\n            await this.setState('info.connection', response.statusCode === 200 ? true : false, true);\n            await this.sleep(500);\n\n            return response.statusCode;\n        } catch (error) {\n            this.log.debug('Token validity check failed. An attempt is being made to obtain a new token');\n            await this.setState('info.connection', false, true);\n            return false;\n        }\n    }\n\n    private async setValues(type: string, postData: { roomTemperatureSetPoint?: ioBroker.StateValue; zoneMode?: ioBroker.StateValue; value?: string; fireplaceModeActive?: ioBroker.StateValue; firePlaceModeActive?: boolean; }): Promise<void> {\n        if (this.accessToken === null) {\n            await this.resolveExternalData();\n        } else if (this.accessToken !== null && await this.checkTokenValidity(this.accessToken) !== 200) {\n            await this.refreshAccessToken();\n        }\n\n        if (await this.checkTokenValidity(this.accessToken) === 200) {\n            const headers = {\n                Authorization: `Bearer ${this.accessToken}`,\n                'Ocp-Apim-Subscription-Key': 'df605c5470d846fc91e848b1cc653ddf',\n                'x-csrf-token': this.csrfToken\n            }\n            try {\n                const response = await this.got.get('https://api.bdrthermea.net/Mobile/api/homes/dashboard', {\n                    headers: headers\n                });\n                const responseJson = JSON.parse(response.body);\n\n                const climateZoneId = responseJson.appliances[0].climateZones[0].climateZoneId;\n                const valueSetpoint = responseJson.appliances[0].climateZones[0].setPoint;\n                const valueFireplaceMode = responseJson.appliances[0].climateZones[0].firePlaceModeActive;\n                const valueZoneMode = responseJson.appliances[0].climateZones[0].zoneMode;\n                const valueProgNumber = responseJson.appliances[0].climateZones[0].activeHeatingClimateTimeProgramNumber;\n\n                await this.sleep(1000);\n\n                switch (type) {\n                    case 'setPoint':\n                        if (valueZoneMode !== 'Manual' || valueSetpoint !== postData?.roomTemperatureSetPoint) {\n                            try {\n                                const postResponse = await this.got.post(`https://api.bdrthermea.net/Mobile/api/climate-zones/${climateZoneId}/modes/${valueZoneMode !== 'Manual' ? 'temporary-override' : 'manual'}`, {\n                                    headers: headers,\n                                    json: postData,\n                                    responseType: 'json'\n                                });\n\n                                this.log.debug(`Post SetPoint: ${postResponse.statusCode === 200 ? 'OK' : 'failed'}`);\n                            } catch (postError) {\n                                this.log.error(`Error making POST request SetPoint: ${postError}`);\n                            }\n                        } else {\n                            this.log.debug('setpoint noChange');\n                        }\n                        break;\n                    case 'fireplaceModeActive':\n                        if (valueFireplaceMode !== postData?.firePlaceModeActive) {\n                            try {\n                                const postResponse = await this.got.post(`https://api.bdrthermea.net/Mobile/api/climate-zones/${climateZoneId}/modes/fireplacemode`, {\n                                    headers: headers,\n                                    json: postData,\n                                    responseType: 'json'\n                                });\n\n                                this.log.debug(`Post fireplacemode: ${postResponse.statusCode === 200 ? 'OK' : 'failed'}`);\n                            } catch (postError) {\n                                this.log.error(`Error making POST request for fireplacemode: ${postError}`);\n                            }\n                        } else {\n                            this.log.debug('fireplaceMode noChange');\n                        }\n                        break;\n                    case 'zoneMode':\n                        if (valueZoneMode !== postData?.zoneMode) {\n                            const jsonData = postData?.zoneMode === 'Scheduling' ? { heatingProgramId: valueProgNumber } : postData?.zoneMode === 'Manual' ? { roomTemperatureSetPoint: valueSetpoint } : null;\n                            try {\n                                const postResponse = await this.got.post(`https://api.bdrthermea.net/Mobile/api/climate-zones/${climateZoneId}/modes/${postData?.value}`, {\n                                    headers: headers,\n                                    json: jsonData,\n                                    responseType: 'json'\n                                });\n\n                                this.log.debug(`Post ZoneMode: ${postResponse.statusCode === 200 ? 'OK' : 'failed'}`);\n                            } catch (postError) {\n                                this.log.error(`Error making POST request for zoneMode: ${postError}`);\n                            }\n                        } else {\n                            this.log.debug('zoneMode noChange');\n                        }\n                        break;\n                }\n                await this.sleep(5000);\n                this.postUpdate = true;\n                await this.updateDevices();\n            } catch (getError) {\n                this.postUpdate = true;\n                this.log.error(`Error making GET request: ${getError}`);\n            }\n        }\n    }\n}\n\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new RemehaHomeAdapter(options);\n} else {\n    // otherwise start the instance directly\n    (() => new RemehaHomeAdapter())();\n}\n"],
  "mappings": "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",
  "names": ["got"]
}
