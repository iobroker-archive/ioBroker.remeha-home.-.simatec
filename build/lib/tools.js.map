{
  "version": 3,
  "sources": ["../../src/lib/tools.ts"],
  "sourcesContent": ["import crypto from 'crypto';\n\nexport async function _translate(word: string, systemLang: string): Promise<string> {\n    return new Promise(resolve => {\n        void (async () => {\n            const translations = await import(`../../admin/i18n/${systemLang ? systemLang : 'en'}/translations.json`);\n            if (translations[word]) {\n                resolve(translations[word]);\n            } else {\n                console.warn(`Please translate in translations.json: ${word}`);\n                resolve(word);\n            }\n        })();\n    });\n}\n\nexport async function generateRandomToken(length: number): Promise<string> {\n    return new Promise(resolve => {\n        const randomToken = crypto.randomBytes(length).toString('base64url');\n        resolve(randomToken);\n    });\n}\n\nexport async function computeCodeChallenge(token: string): Promise<string | null> {\n    return new Promise(resolve => {\n        const hash = crypto.createHash('sha256');\n        hash.update(token);\n        const digest = hash.digest();\n\n        const base64Url = digest.toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n\n        resolve(base64Url);\n    });\n}\n\nexport async function randomBytes(length: number): Promise<string | null> {\n    return new Promise(resolve => {\n        const _randomBytes = crypto.randomBytes(length).toString('base64url');\n        resolve(_randomBytes);\n    });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAmB;AAEnB,eAAsB,WAAW,MAAc,YAAqC;AAChF,SAAO,IAAI,QAAQ,aAAW;AAC1B,UAAM,YAAY;AACd,YAAM,eAAe,MAAM,6BAAO,QAAP,QAAO,oBAAoB,aAAa,aAAa,IAAI,oBAAoB;AACxG,UAAI,aAAa,IAAI,GAAG;AACpB,gBAAQ,aAAa,IAAI,CAAC;AAAA,MAC9B,OAAO;AACH,gBAAQ,KAAK,0CAA0C,IAAI,EAAE;AAC7D,gBAAQ,IAAI;AAAA,MAChB;AAAA,IACJ,GAAG;AAAA,EACP,CAAC;AACL;AAEA,eAAsB,oBAAoB,QAAiC;AACvE,SAAO,IAAI,QAAQ,aAAW;AAC1B,UAAM,cAAc,cAAAA,QAAO,YAAY,MAAM,EAAE,SAAS,WAAW;AACnE,YAAQ,WAAW;AAAA,EACvB,CAAC;AACL;AAEA,eAAsB,qBAAqB,OAAuC;AAC9E,SAAO,IAAI,QAAQ,aAAW;AAC1B,UAAM,OAAO,cAAAA,QAAO,WAAW,QAAQ;AACvC,SAAK,OAAO,KAAK;AACjB,UAAM,SAAS,KAAK,OAAO;AAE3B,UAAM,YAAY,OAAO,SAAS,QAAQ,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,EAAE;AAErG,YAAQ,SAAS;AAAA,EACrB,CAAC;AACL;AAEA,eAAsB,YAAY,QAAwC;AACtE,SAAO,IAAI,QAAQ,aAAW;AAC1B,UAAM,eAAe,cAAAA,QAAO,YAAY,MAAM,EAAE,SAAS,WAAW;AACpE,YAAQ,YAAY;AAAA,EACxB,CAAC;AACL;",
  "names": ["crypto"]
}
